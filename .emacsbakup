(setq c-default-style "bsd"
      c-basic-offset 8
      tab-width 8
      indent-tabs-mode t)
(require 'whitespace)
(setq whitespace-style '(face empty lines-tail trailing))
(global-whitespace-mode t)
(setq column-number-mode t)
;; Disables auto-save. - - - - - - - - - - - - - - - - - - - - - - - - - - - ;;
(setq auto-save-default nil)
;; Auto closing brackets. - - - - - - - - - - - - - - - - - - - - - - - - - -;;
(electric-pair-mode 1)
;; Highlights parenthesis and brackets. - - - - - - - - - - - - - - - - - - -;;
(show-paren-mode t)

;; Higlights current line.
;; (global-hl-line-mode t)
;; Shows cursor position within line. - - - - - - - - - - - - - - - - - - - -;;
(column-number-mode 1)

;; Shows line number column on the left by default. - - - - - - - - - - - - -;;
(global-linum-mode t)
;; Enables use of C-c to copy, C-x to cut... - - - - - - - - - - - - - - - - ;;
(cua-mode 1)
;; Shows cursor position within line. - - - - - - - - - - - - - - - - - - - -;;
(column-number-mode 1)
;; Makes tab key always call an indent command. - - - - - - - - - - - - - - -;;
(setq-default tab-always-indent t)

;; Make tab key do indent first then completion. - - - - - - - - - - - - - - ;;
(setq-default tab-always-indent 'complete)

;; Bind C-x C-<up> to move line up - - - - - - - - - - - - - - - - - - - - - ;;
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
(global-set-key (kbd "C-x C-<up>") 'move-line-up)

;; Bind C-x C-<down> to move line down - - - - - - - - - - - - - - - - - - - ;;
(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
(global-set-key (kbd "C-x C-<down>") 'move-line-down)
;; Adds colorhiglighting for hex codes in html and css modes. - - - - - - - - ;;
(defun xah-syntax-color-hex ()
  (interactive)
  (font-lock-add-keywords
   nil
   '(("#[[:xdigit:]]\\{3\\}"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :background
                      (let* (
                             (ms (match-string-no-properties 0))
                             (r (substring ms 1 2))
                             (g (substring ms 2 3))
                             (b (substring ms 3 4)))
                        (concat "#" r r g g b b))))))
     ("#[[:xdigit:]]\\{6\\}"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :background (match-string-no-properties 0)))))))
  (font-lock-flush))
(add-hook 'css-mode-hook 'xah-syntax-color-hex)
(add-hook 'html-mode-hook 'xah-syntax-color-hex)
(add-hook 'js2-mode-hook 'xah-syntax-color-hex)

;; Highlight the number on the line numbers. - - - - - - - - - - - - - - - - ;;
(require 'hl-line)
(defface my-linum-hl
  `((t :inherit linum :background ,(face-background 'hl-line nil t)))
  "Face for the current line number."
  :group 'linum)

(defvar my-linum-format-string "%3d")

(add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

(defun my-linum-get-format-string ()
  (let* ((width (1+ (length (number-to-string
                             (count-lines (point-min) (point-max))))))
         (format (concat "%" (number-to-string width) "d \u2503 ")))
    (setq my-linum-format-string format)))

(defvar my-linum-current-line-number 0)

(setq linum-format 'my-linum-format)

(defun my-linum-format (line-number)
  (propertize (format my-linum-format-string line-number) 'face
              (if (eq line-number my-linum-current-line-number)
                  'my-linum-hl
                'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

;; ------------------------------------------------------------------------- ;;
;;                               Custom faces.                               ;;
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;;
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:foreground "#FFFFFF" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1 :width normal :foundry "default" :family "default"))))
 '(button ((t (:foreground "color-178" :overline t :underline t))))
 '(company-preview ((t (:background "color-235" :foreground "color-178"))))
 '(company-preview-common ((t (:inherit company-preview :foreground "color-178"))))
 '(company-scrollbar-bg ((t (:background "color-236"))))
 '(company-scrollbar-fg ((t (:background "color-220"))))
 '(company-tooltip ((t (:background "color-235" :foreground "color-136"))))
 '(company-tooltip-annotation ((t (:foreground "color-220"))))
 '(company-tooltip-common ((t (:foreground "color-220"))))
 '(company-tooltip-selection ((t (:background "color-236"))))
 '(custom-button-pressed-unraised ((t (:inherit custom-button-pressed-unraised :foreground "color-94"))))
 '(custom-group-tag ((t (:inherit variable-pitch :foreground "color-136" :weight bold :height 1.2))))
 '(custom-group-tag-1 ((t (:inherit variable-pitch :foreground "color-94" :weight bold :height 1.2))))
 '(custom-state ((t (:foreground "color-47"))))
 '(custom-variable-tag ((t (:foreground "color-136" :weight bold))))
 '(eieio-custom-slot-tag-face ((t (:foreground "color-136"))) t)
 '(error ((t (:foreground "brightred" :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "#B0C5DE"))))
 '(font-lock-comment-face ((t (:foreground "#FF7F24"))))
 '(font-lock-constant-face ((t (:foreground "#7FFFD4"))))
 '(font-lock-function-name-face ((t (:foreground "#87CEFA"))))
 '(font-lock-keyword-face ((t (:foreground "#00FFFF"))))
 '(font-lock-negation-char-face ((t (:foreground "#FF0000"))))
 '(font-lock-string-face ((t (:foreground "#FFA07A"))))
 '(font-lock-type-face ((t (:foreground "#98FB98"))))
 '(font-lock-variable-name-face ((t (:foreground "#FFD787"))))
 '(fringe ((t (:background "color-243" :inverse-video t))))
 '(highlight ((t (:background "color-235"))))
 '(link ((t (:foreground "color-178" :underline t))))
 '(link-visited ((t (:inherit link :foreground "color-94"))))
 '(linum ((t (:inherit (shadow default) :foreground "color-243"))))
 '(magit-diff-added ((t (:background "color-22" :foreground "brightgreen"))))
 '(magit-diff-added-highlight ((t (:background "color-22" :foreground "brightgreen"))))
 '(magit-diff-context-highlight ((t (:background "color-236" :foreground "color-250"))))
 '(magit-diff-hunk-heading-highlight ((t (:background "color-236" :foreground "color-250"))))
 '(magit-diff-removed ((t (:background "color-52" :foreground "brightred"))))
 '(magit-diff-removed-highlight ((t (:background "color-52" :foreground "brightred"))))
 '(magit-section-highlight ((t (:background "color-235"))))
 '(menu ((t nil)))
 '(minibuffer-prompt ((t (:foreground "color-220"))))
 '(mode-line ((t (:foreground "brightwhite" :box (:line-width -1 :color "red" :style released-button)))))
 '(mode-line-buffer-id ((t (:foreground "color-178" :weight bold))))
 '(mode-line-emphasis ((t (:foreground "color-136" :weight bold))))
 '(mode-line-highlight ((t (:box (:line-width 2 :color "grey40" :style released-button)))))
 '(mode-line-inactive ((t (:inherit mode-line :foreground "color-243" :box (:line-width -1 :color "grey40") :weight light))))
 '(my-linum-hl ((t (:foreground "color-220"))))
 '(region ((t (:inverse-video t))))
 '(show-paren-match ((t (:foreground "#00FF00"))))
 '(show-paren-mismatch ((t (:foreground "#FF00FF"))))
 '(trailing-whitespace ((t (:background "brightred"))))
 '(whitespace-empty ((t (:background "yellow" :foreground "brightred"))))
 '(whitespace-hspace ((t (:foreground "color-235"))))
 '(whitespace-line ((t (:background "color-234" :foreground "brightred" :inverse-video t))))
 '(whitespace-space ((t (:foreground "brightwhite")))))
